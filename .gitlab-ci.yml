workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"      
      when: never
    - when: always

variables:
  IMAGE_NAME: $NEXUS_REGISTRY/root/p1
  DEV_SERVER2_HOST: 172.16.16.102
  DEV_SERVER_HOST: 172.16.16.104
  DEV_ENDPOINT: http://172.16.16.104:3000

stages:
  - test
  - build
  - deploy

run_unit_tests:
   image: node:alpine
   stage: test
   tags:
     - ec2
     - remote 
     - shell
   before_script:
     - cd app
     - npm install
   script:
     - npm test
   artifacts:
     when: always
     paths:
       - app/junit.xml
     reports:
       junit: app/junit.xml


build_image:
  stage: build
  tags:
    - ec2
    - remote
    - shell
  before_script:
    - chmod 666 $PRIVATE_KEY_SERVER1
    - export PACKAGE_JSON_VERSION=$(cat app/package.json | jq -r .version)
    - export VERSION=$PACKAGE_JSON_VERSION.$CI_PIPELINE_IID
    - echo $VERSION > version-file.txt
  script:
    - docker build -t $IMAGE_NAME:$VERSION .
  artifacts:
    paths:
      - version-file.txt


push_image:
  stage: build
  needs:
    - build_image
  tags:
    - ec2
    - remote
    - shell
  before_script:
    - export VERSION=$(cat version-file.txt)
    - docker login -u $NEXUS_USER -p $NEXUS_PASSWD $NEXUS_REGISTRY
  script:
    - docker push $IMAGE_NAME:$VERSION


deploy_to_dev:
  stage: deploy
  tags:
    - ec2
    - remote
    - shell
  before_script:
    - export VERSION=$(cat version-file.txt)
  script:
    - scp -o StrictHostKeyChecking=no ./docker-compose.yaml root@$DEV_SERVER_HOST:/root/loadbalance
    - ssh -o StrictHostKeyChecking=no root@$DEV_SERVER_HOST "
        cd loadbalancer && docker login -u $NEXUS_USER -p $NEXUS_PASSWD $NEXUS_REGISTRY &&

        export DC_IMAGE_NAME=$IMAGE_NAME &&
        export DC_IMAGE_TAG=$VERSION &&

        docker-compose down &&
        docker-compose up -d"
  environment:
     name: development
     url: $DEV_ENDPOINT
